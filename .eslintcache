[{"D:\\tofe\\websites\\binary2dec\\bin\\src\\reportWebVitals.js":"1","D:\\tofe\\websites\\binary2dec\\bin\\src\\App.js":"2","D:\\tofe\\websites\\binary2dec\\bin\\src\\BinaryConverter.js":"3","D:\\tofe\\websites\\binary2dec\\bin\\src\\decimalConverter.js":"4","D:\\tofe\\websites\\binary2dec\\bin\\src\\index.js":"5"},{"size":362,"mtime":1606211715787,"results":"6","hashOfConfig":"7"},{"size":1601,"mtime":1612661305859,"results":"8","hashOfConfig":"7"},{"size":5829,"mtime":1612661652400,"results":"9","hashOfConfig":"7"},{"size":7588,"mtime":1612661790682,"results":"10","hashOfConfig":"7"},{"size":460,"mtime":1612661516839,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"937bj",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\tofe\\websites\\binary2dec\\bin\\src\\reportWebVitals.js",[],["26","27"],"D:\\tofe\\websites\\binary2dec\\bin\\src\\App.js",[],["28","29"],"D:\\tofe\\websites\\binary2dec\\bin\\src\\BinaryConverter.js",["30","31","32","33","34","35","36","37"],"import React from 'react'\r\nimport './App.css';\r\nimport {Col,Divider ,Result,Badge,Timeline, Typography } from 'antd'\r\n\r\nclass BinaryConverter extends React.Component {\r\n\r\n        state = {\r\n            BinaryNumber:null,\r\n            CurrentNumber:null,\r\n            Result:null,\r\n            StepsArray:[],\r\n            fraction:false,\r\n                }\r\n          \r\n        BinaryConverterToDecimal(num,base=2)\r\n        {\r\n            var [integer, fraction = ''] = num.toString().split('.');\r\n            return parseInt(integer, base) + (integer[0] !== '-' || -1) * fraction\r\n                .split('')\r\n                .reduceRight((r, a) => (r + parseInt(a, base)) / base, 0);\r\n        \r\n        }\r\n        isFloat = (n)=>\r\n        {\r\n            return Number(n) === n && n % 1 !== 0;\r\n        }\r\n        CheckFraction = (n)=>\r\n        {   \r\n            n = Number(n)\r\n            n = this.isFloat(n)\r\n            this.setState({fraction:n})\r\n            return n ;\r\n        }\r\n         StartConverter=()=>\r\n         {   \r\n             console.log('button clicked')\r\n             this.Converter(this.state.BinaryNumber)\r\n         }\r\n         Steps = (number,isFraction=false,AllFractionNumbers=[])=>\r\n         {  \r\n            this.setState({StepsArray:[]})\r\n            let i = 0;\r\n            let f = 0;\r\n            let StepsNumbers = [] ;\r\n            let ArrayNumber = String(number).split('').reverse();\r\n            ArrayNumber.forEach(n => { \r\n                if(n!='.'){\r\n                StepsNumbers.push({number:n,index:i,afterdot:false})\r\n                }\r\n                this.setState({StepsArray:StepsNumbers})\r\n                i++\r\n                \r\n                                     });\r\n            \r\n            let FractionNumbersSteps = StepsNumbers ;\r\n            if(isFraction && AllFractionNumbers!=null){\r\n                AllFractionNumbers.split('').reverse().forEach(n => { \r\n                    if(n!='.'){\r\n                        FractionNumbersSteps.push({number:n,index:f,afterdot:true})\r\n                              }\r\n                    this.setState({StepsArray:FractionNumbersSteps})\r\n                    f++\r\n                    \r\n                });\r\n\r\n            }\r\n         }\r\n         Converter = (e)=>\r\n         {      if(e!=null){\r\n                let WithoutFraction = (this.CheckFraction(Number(e)))?e.substr(0,e.indexOf('.')):e;;\r\n                let FractionOnly =  (this.CheckFraction(Number(e)))?e.substr(e.indexOf('.')+1,e.length):e;\r\n                this.Steps(WithoutFraction,this.CheckFraction(Number(e)),FractionOnly)\r\n                var Decimal = this.BinaryConverterToDecimal(e)\r\n                this.setState({BinaryNumber:WithoutFraction,Result:Decimal,BinaryNumberWithoutFraction:FractionOnly})\r\n                            }\r\n         }\r\n         UNSAFE_componentWillReceiveProps(nextProps, prevState, snapshot)\r\n         {\r\n             if(nextProps.value!=this.state.BinaryNumber){\r\n                    this.setState({\r\n                        BinaryNumber:nextProps.value,\r\n                        CurrentNumber :nextProps.value\r\n                    })\r\n                    this.Converter(nextProps.value)                    \r\n             }\r\n         }\r\n\r\n  render(){  \r\n    const { Title } = Typography;\r\n\r\n  return (\r\n        <Col span={24}>\r\n    {(this.state.BinaryNumber==null || this.state.BinaryNumber<-1 || this.state.BinaryNumber==\"\"|| !this.state.BinaryNumber)?(<Result status=\"404\" title=\"N0 NUMBER\" subTitle=\"Please write your baniry number to start.\"/>):\r\n   <>\r\n   <title>Decimal to binary Converter</title>\r\n\r\n    <div>\r\n        <Title level={3}>\r\n        Converting ({this.state.CurrentNumber}) to Decimal :\r\n        </Title>\r\n    <div>\r\n    <Timeline>\r\n    <Timeline.Item>Step 1 - Multiplying each digit to 2 to power of its position : \r\n    <br></br>\r\n    <Divider orientation=\"left\">\r\n    <Badge  showZero size=\"small\" style={{color:\"black\",background:\"rgba(0,0,0,0)\",border:0}}  offset={[3, 15]} count={<small>2</small>}  >({ this.state.CurrentNumber })</Badge> = \r\n    {this.state.StepsArray.map((e,i)=>{\r\n            return (<span key={i+1}>\r\n                (<Badge  showZero size=\"small\" style={{color:\"black\",background:\"rgba(0,0,0,0)\",border:0}}  offset={[3, -3]}  count={<small>{(e.afterdot==true)?'-'+String(e.index+1):''+String(e.index)}</small>}  > 2 </Badge> Ã—  {e.number}) \r\n                {(i==(this.state.StepsArray.length-1))?'':'+'}\r\n                </span>)\r\n        })} \r\n        <br></br>\r\n        </Divider>\r\n         </Timeline.Item>\r\n    <Timeline.Item>Step 2 - Then add all the digits : <br></br>\r\n    <Divider orientation=\"left\">\r\n\r\n    <Badge  showZero size=\"small\" style={{color:\"black\",background:\"rgba(0,0,0,0)\",border:0}}  offset={[3, 15]} count={<small>2</small>}  >({ this.state.CurrentNumber })</Badge> = \r\n    {this.state.StepsArray.map((e,i)=>{\r\n        return (<span key={i+1}>\r\n                ({(Number(e.number)==1)?(Math.pow(2,(e.afterdot)?(e.index+1)*-1:e.index)):e.number}) \r\n                {(i==(this.state.StepsArray.length-1))?'':'+'}\r\n                </span>)\r\n        })}\r\n        </Divider>\r\n    </Timeline.Item>\r\n    <Timeline.Item color=\"green\">\r\n        The Result : <br></br>\r\n        <Divider orientation=\"left\">\r\n\r\n    <Badge  showZero size=\"small\" style={{color:\"black\",background:\"rgba(0,0,0,0)\",border:0}}  offset={[3, 15]} count={<small>2</small>}  >({ this.state.CurrentNumber })</Badge> \r\n         =\r\n        <Badge  showZero size=\"small\" style={{color:\"black\",background:\"rgba(0,0,0,0)\"}}  offset={[5, 20]} count={<small>10</small>}  >(\r\n        {this.state.Result})\r\n        </Badge>\r\n        </Divider>\r\n    </Timeline.Item>\r\n  </Timeline>\r\n     \r\n\r\n    \r\n    </div>\r\n    </div>\r\n\r\n  </>  \r\n}\r\n\r\n        </Col>\r\n       );\r\n}\r\n}\r\n\r\nexport default BinaryConverter;\r\n","D:\\tofe\\websites\\binary2dec\\bin\\src\\decimalConverter.js",["38","39","40","41","42"],"import React from 'react'\r\nimport './App.css';\r\nimport {Col,Divider ,Result,Badge,Timeline, Typography ,Table, Row} from 'antd'\r\n\r\nclass DecimalConverter extends React.Component {\r\n\r\n        state = {\r\n            DecimalNumber:null,\r\n            CurrentNumber:null,\r\n            Result:null,\r\n            DecimalWithoutFraction:null ,\r\n            StepsArray:[],\r\n            ResultArray:[],\r\n            fraction:false,\r\n            endOfOperation:true ,\r\n            currentOperation:null,\r\n            \r\n                }\r\n          \r\n        DecimalConverterToBinary(num,base=2)\r\n        {\r\n            return Number(num).toString(base)\r\n        }\r\n        isFloat = (n)=>\r\n        {\r\n            return Number(n) === n && n % 1 !== 0;\r\n        }\r\n        CheckFraction = (n)=>\r\n        {   \r\n            n = Number(n)\r\n            n = this.isFloat(n)\r\n            this.setState({fraction:n})\r\n            return n ;\r\n        }\r\n         StartConverter=()=>\r\n         {   \r\n             console.log('button clicked')\r\n             this.Converter(this.state.DecimalNumber)\r\n         }\r\n         GetIntgerOnly= (e)=>\r\n         {\r\n            return (this.CheckFraction(Number(e)))?String(e).substr(0,String(e).indexOf('.')):e;\r\n         }\r\n         GetFractionPart = (e)=>\r\n         {\r\n            return (this.CheckFraction(Number(e)))?e.substr(e.indexOf('.')+1,e.length):e;\r\n         }\r\n         Steps = (number,isFraction=false,AllFractionNumbers=[])=>\r\n         {  \r\n            // Solve the integer part : \r\n            let n = number ;\r\n            this.setState({ResultArray:[],StepsArray:[]})\r\n            let TEMP_ResultArray = []\r\n            let TEMP_StepsArray  = []\r\n            if(n%2==1){\r\n                TEMP_ResultArray.push(1)\r\n            }\r\n            while(true) {\r\n                let isOdd = (n%2==1)?true:false ;\r\n                let num = (isOdd)?Number(n)-1:Number(n);\r\n                n= Number(num)/2\r\n                if(!isOdd){\r\n                    TEMP_ResultArray.push(0)\r\n                }else{\r\n                    TEMP_StepsArray.push(num)\r\n                }\r\n                if((n%2)==1){TEMP_ResultArray.push(1)};\r\n                TEMP_StepsArray.push(n);\r\n                this.setState({currentOperation:n,ResultArray:TEMP_ResultArray,StepsArray:TEMP_StepsArray})\r\n                if((n)<=1){\r\n                    this.setState({endOfOperation:false})\r\n                    break;\r\n                }\r\n\r\n                        }\r\n            let Result = this.DecimalConverterToBinary((isFraction)?Number(number+'.'+AllFractionNumbers):number)\r\n            this.setState({\r\n                Result,\r\n            })\r\n\r\n            // solve the fraction part : \r\n            /*\r\n            if(isFraction)\r\n            {   \r\n                let j = 0 ;\r\n                let FractionNumbers = AllFractionNumbers ;\r\n                let TEMP_FRACTION_NUMBER =Number('0.'+FractionNumbers) ;\r\n                let _a = TEMP_FRACTION_NUMBER;\r\n                let Fraction_Result = []\r\n                while (true) {\r\n                    let b = _a;\r\n                    _a=_a*2 \r\n                    if(Number(this.GetFractionPart(String(b)))<=0){break ;}\r\n                    console.log(\"temp f : \",b,\" *2 = \",_a)\r\n                    b = _a - this.GetIntgerOnly(_a) ;\r\n                    Fraction_Result.push(_a)\r\n                    console.log(Fraction_Result)\r\n                    if(j==5){\r\n                        break ;\r\n                    }\r\n                    j++\r\n                }\r\n            } */\r\n         }\r\n         Converter = (e)=>\r\n         {      \r\n          let WithoutFraction = this.GetIntgerOnly(e)\r\n          let FractionOnly =  this.GetFractionPart(e) \r\n          this.setState({endOfOperation:true,currentOperation:WithoutFraction,DecimalWithoutFraction:WithoutFraction}) \r\n          this.Steps(WithoutFraction,this.CheckFraction(Number(e)),FractionOnly)\r\n         }\r\n         UNSAFE_componentWillReceiveProps(nextProps, prevState, snapshot)\r\n         {\r\n             if(nextProps.value!=this.state.DecimalNumber){\r\n                    this.setState({\r\n                        DecimalNumber:nextProps.value,\r\n                        CurrentNumber :nextProps.value\r\n                    })\r\n                    this.Converter(nextProps.value)                    \r\n             }\r\n         }\r\n\r\n  render(){  \r\n    const { Title } = Typography;\r\n    const DATA_SOURCE = []\r\n    this.state.ResultArray.forEach((e,i)=>{\r\n            DATA_SOURCE.push({key:i,result:e,step:this.state.StepsArray[i],number:2})\r\n    })\r\n    const columns = [\r\n        {\r\n            title:'Result',\r\n            align:'center',\r\n            dataIndex:'result',\r\n            key:'result',\r\n            // width:'50',\r\n            ellipsis: true,\r\n\r\n        },\r\n        {\r\n            title:'step',\r\n            align:'right',\r\n            dataIndex:'step',\r\n            key:'step',\r\n            width:50,\r\n            ellipsis: true,\r\n\r\n        },\r\n        {\r\n            title:'Divided by',\r\n            align:'left',\r\n            dataIndex:'number',\r\n            key:'number',\r\n            width:'30',\r\n            ellipsis: true,\r\n\r\n        }\r\n    ]\r\n  return (\r\n        <Col span={24}>\r\n    {(this.state.DecimalNumber==null || this.state.DecimalNumber<-1 || this.state.DecimalNumber==\"\"|| !this.state.DecimalNumber)?(<Result status=\"404\" title=\"N0 NUMBER\" subTitle=\"Please write your number to start.\"/>):\r\n   <>\r\n   <title>Decimal to binary Converter</title>\r\n    <div>\r\n        <Title level={3}>\r\n        Converting ({this.state.CurrentNumber}) to Binary :\r\n        </Title>\r\n    <div>\r\n        <Timeline>\r\n    <Timeline.Item color=\"green\">\r\n        The Result : <br></br>\r\n        <Divider orientation=\"left\">\r\n\r\n    <Badge  showZero size=\"small\" style={{color:\"black\",background:\"rgba(0,0,0,0)\",border:0}}  offset={[3, 15]} count={<small>10</small>}  >({ this.state.CurrentNumber })</Badge> \r\n         =\r\n        <Badge  showZero size=\"small\" style={{color:\"black\",background:\"rgba(0,0,0,0)\"}}  offset={[5, 20]} count={<small>2</small>}  >(\r\n        {this.state.Result})\r\n        </Badge>\r\n        </Divider>\r\n    </Timeline.Item>\r\n\r\n<Timeline.Item> \r\n<Divider orientation=\"left\">\r\n    - Step one : solve the integer part (no fraction): <br></br>\r\n<Badge  showZero size=\"small\" style={{color:\"black\",background:\"rgba(0,0,0,0)\",border:0}}  offset={[3, 15]} count={<small>10</small>}  > ({ this.state.DecimalWithoutFraction }) </Badge> \r\n      =    <Badge  showZero size=\"small\" style={{color:\"black\",background:\"rgba(0,0,0,0)\"}}  offset={[5, 20]} count={<small>2</small>}  >(\r\n        {this.state.Result})\r\n        </Badge>\r\n    </Divider>\r\n     <Row justify=\"center\">\r\n     <Col sm={24} md={12} lg={12} >\r\n<Table bordered columns={columns} size=\"small\" pagination={false} dataSource={DATA_SOURCE} />\r\n     </Col>\r\n     </Row>\r\n</Timeline.Item>\r\n<Timeline.Item> \r\n<Divider orientation=\"left\">\r\n    - Step two : solve fraction only <small>(berfore the point)</small> : <br></br>\r\n    <h3>Comming soon...</h3>\r\n    <img src=\"./wow.gif\" alt=\"comming soon\" width=\"150\"></img>\r\n{/* <Badge  showZero size=\"small\" style={{color:\"black\",background:\"rgba(0,0,0,0)\",border:0}}  offset={[3, 15]} count={<small>10</small>}  > ({ this.state.DecimalWithoutFraction }) </Badge>  */}\r\n      {/* = */}\r\n    </Divider>\r\n     <Row justify=\"center\">\r\n     <Col sm={24} md={12} lg={12} >\r\n\r\n     </Col>\r\n     </Row>\r\n</Timeline.Item>\r\n  </Timeline>\r\n    \r\n    </div>\r\n    </div>\r\n\r\n  </>  \r\n}\r\n\r\n        </Col>\r\n       );\r\n}\r\n}\r\n\r\nexport default DecimalConverter;\r\n","D:\\tofe\\websites\\binary2dec\\bin\\src\\index.js",[],{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"43","replacedBy":"47"},{"ruleId":"45","replacedBy":"48"},{"ruleId":"49","severity":1,"message":"50","line":47,"column":21,"nodeType":"51","messageId":"52","endLine":47,"endColumn":23},{"ruleId":"49","severity":1,"message":"50","line":58,"column":25,"nodeType":"51","messageId":"52","endLine":58,"endColumn":27},{"ruleId":"49","severity":1,"message":"50","line":79,"column":32,"nodeType":"51","messageId":"52","endLine":79,"endColumn":34},{"ruleId":"49","severity":1,"message":"53","line":93,"column":93,"nodeType":"51","messageId":"52","endLine":93,"endColumn":95},{"ruleId":"49","severity":1,"message":"53","line":109,"column":153,"nodeType":"51","messageId":"52","endLine":109,"endColumn":155},{"ruleId":"49","severity":1,"message":"53","line":110,"column":20,"nodeType":"51","messageId":"52","endLine":110,"endColumn":22},{"ruleId":"49","severity":1,"message":"53","line":122,"column":36,"nodeType":"51","messageId":"52","endLine":122,"endColumn":38},{"ruleId":"49","severity":1,"message":"53","line":123,"column":20,"nodeType":"51","messageId":"52","endLine":123,"endColumn":22},{"ruleId":"49","severity":1,"message":"53","line":55,"column":19,"nodeType":"51","messageId":"52","endLine":55,"endColumn":21},{"ruleId":"49","severity":1,"message":"53","line":59,"column":33,"nodeType":"51","messageId":"52","endLine":59,"endColumn":35},{"ruleId":"49","severity":1,"message":"53","line":67,"column":25,"nodeType":"51","messageId":"52","endLine":67,"endColumn":27},{"ruleId":"49","severity":1,"message":"50","line":114,"column":32,"nodeType":"51","messageId":"52","endLine":114,"endColumn":34},{"ruleId":"49","severity":1,"message":"53","line":160,"column":96,"nodeType":"51","messageId":"52","endLine":160,"endColumn":98},"no-native-reassign",["54"],"no-negated-in-lhs",["55"],["54"],["55"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","no-global-assign","no-unsafe-negation"]